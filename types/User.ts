// Copyright (c) 2022. Heusala Group Oy <info@heusalagroup.fi>. All rights reserved.

import { isString, isStringOrUndefined } from "../../../../io/hyperify/core/types/String";
import { isRegularObject } from "../../../../io/hyperify/core/types/RegularObject";
import { hasNoOtherKeysInDevelopment } from "../../../../io/hyperify/core/types/OtherKeys";

export interface User {

    /**
     * The workspace this user belongs to
     */
    readonly workspaceId : string;

    /**
     * The unique ID of the user.
     *
     * This is the ID generated by the database repository implementation.
     *
     * Use `"new"` when creating a new object.
     */
    readonly id   : string;

    /**
     * The name of the user
     */
    readonly name : string;

    /**
     * The email of the user
     */
    readonly email : string;

}

/**
 *
 * @param workspaceId
 * @param id
 * @param name
 * @param email
 */
export function createUser (
    workspaceId: string,
    id: string,
    name: string,
    email: string
): User {
    return {
        workspaceId,
        id,
        name,
        email
    };
}

export function isUser (value: any): value is User {
    return (
        isRegularObject(value)
        && hasNoOtherKeysInDevelopment(value, [
            'workspaceId',
            'id',
            'name',
            'email'
        ])
        && isString(value?.workspaceId)
        && isString(value?.id)
        && isString(value?.name)
        && isString(value?.email)
    );
}

export function isPartialUser (value: any): value is Partial<User> {
    return (
        isRegularObject(value)
        && hasNoOtherKeysInDevelopment(value, [
            'workspaceId',
            'id',
            'name',
            'email'
        ])
        && isStringOrUndefined(value?.workspaceId)
        && isStringOrUndefined(value?.id)
        && isStringOrUndefined(value?.name)
        && isStringOrUndefined(value?.email)
    );
}

export function stringifyUser (value: User): string {
    return `User(${value})`;
}

export function parseUser (value: any): User | undefined {
    if ( isUser(value) ) return value;
    return undefined;
}
